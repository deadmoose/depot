<?xml version="1.0"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="depot" default="compile" basedir=".">
  <!-- project metadata -->
  <property name="lib.name"         value="depot"/>
  <property name="doc.packages"     value="com.samskivert.depot.*"/>
  <property name="doc.overview"     value="com/samskivert/depot/overview.html"/>
  <property name="copyright.holder" value="Michael Bayne"/>

  <!-- the next release version -->
  <property name="revision" value="1.0"/>

  <!-- various directories used when building things -->
  <property name="src.dir"     value="src/main/java"/>
  <property name="test.dir"    value="src/test/java"/>
  <property name="deploy.dir"  value="dist"/>
  <property name="classes.dir" value="${deploy.dir}/classes"/>
  <property name="tclasses.dir" value="${deploy.dir}/test-classes"/>
  <property name="javadoc.dir" value="${deploy.dir}/docs"/>

  <!-- downloads ivy if necessary and sets everything up -->
  <property name="ivy.vers" value="2.1.0-rc2" />
  <property name="ivy.jar.dir" value="${user.home}/.ant/lib" />
  <condition property="ivy.exists"><available file="${ivy.jar.dir}/ivy.jar"/></condition>
  <target name="-download-ivy" unless="ivy.exists">
    <mkdir dir="${ivy.jar.dir}"/>
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.vers}/ivy-${ivy.vers}.jar" 
         dest="${ivy.jar.dir}/ivy.jar" usetimestamp="true"/>
  </target>
  <target name="-init-ivy" depends="-download-ivy">
    <path id="ivy.lib.path"><fileset dir="${ivy.jar.dir}" includes="*.jar"/></path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    <ivy:cachepath pathid="compile.classpath" conf="compile" log="download-only"/>
    <ivy:cachepath pathid="test.classpath" conf="test" log="download-only"/>
  </target>

  <!-- prepares the application directories -->
  <target name="-prepare" depends="-init-ivy">
    <tstamp><format property="year" pattern="yyyy" /></tstamp>
    <mkdir dir="${deploy.dir}"/>
    <mkdir dir="${deploy.dir}/jar"/>
    <mkdir dir="${deploy.dir}/source"/>
    <mkdir dir="${deploy.dir}/javadoc"/>
    <mkdir dir="${classes.dir}"/>
    <mkdir dir="${tclasses.dir}"/>
    <mkdir dir="${javadoc.dir}"/>
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}" includes="**/*.tmpl"/>
    </copy>
  </target>

  <target name="check-ivy" depends="-init-ivy" description="Computes and prints Ivy classpath.">
    <pathconvert pathsep="${line.separator}  " property="compile.str" refid="compile.classpath"/>
    <echo>Compile classpath:</echo>
    <echo>  ${compile.str}</echo>
    <echo>Test classpath:</echo>
    <pathconvert pathsep="${line.separator}  " property="test.str" refid="test.classpath"/>
    <echo>  ${test.str}</echo>
  </target>

  <target name="clean" description="Cleans out build results.">
    <delete dir="${classes.dir}"/>
    <delete dir="${deploy.dir}/docs"/>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.jar"/></delete>
  </target>

  <target name="distclean" description="Completely removes build result directory.">
    <delete dir="${deploy.dir}"/>
  </target>

  <target name="compile" depends="-prepare" description="Compiles main code.">
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" source="1.5" target="1.5" encoding="utf-8">
      <classpath refid="compile.classpath"/>
      <exclude name="com/samskivert/depot/tools/**"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <target name="tools-compile" depends="compile" description="Compiles tool code.">
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" source="1.5" target="1.5" encoding="utf-8">
      <classpath refid="compile.classpath"/>
      <include name="com/samskivert/depot/tools/**"/>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <target name="test-compile" depends="compile" description="Compiles test classes.">
    <javac srcdir="${test.dir}" destdir="${tclasses.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" source="1.5" target="1.5" encoding="utf-8">
      <classpath>
        <pathelement location="${classes.dir}"/>
        <path refid="test.classpath"/>
      </classpath>
      <compilerarg value="-Xlint"/>
      <compilerarg value="-Xlint:-serial"/>
    </javac>
  </target>

  <target name="genrecord" depends="tools-compile,test-compile"
          description="Regenerates persistent record boilerplate.">
    <taskdef name="grecord" classname="com.samskivert.depot.tools.GenRecordTask">
      <classpath>
        <pathelement location="${classes.dir}"/>
        <path refid="compile.classpath"/>
      </classpath>
    </taskdef>
    <path id="genrec.classpath">
      <pathelement location="${classes.dir}"/>
      <pathelement location="${tclasses.dir}"/>
    </path>
    <grecord classpathref="genrec.classpath">
      <fileset dir="${src.dir}" includes="**/*Record.java"/>
      <fileset dir="${test.dir}" includes="**/*Record.java"/>
    </grecord>
  </target>

  <target name="javadoc" depends="-prepare" description="Builds javadocs.">
    <javadoc windowtitle="${lib.name} API" doctitle="${lib.name} API"
             overview="${src.dir}/${doc.overview}" destdir="${javadoc.dir}"
             additionalparam="-breakiterator"
             link="http://samskivert.com/code/samskivert/docs/">
      <packageset dir="${src.dir}">
        <exclude name="com/samskivert/depot/impl/**"/>
      </packageset>
      <bottom>Copyright &#169; 2006-${year} ${copyright.holder}. All Rights Reserved.</bottom>
      <classpath refid="compile.classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
    </javadoc>
    <jar destfile="${deploy.dir}/javadoc/${lib.name}.jar" basedir="${javadoc.dir}"/>
  </target>

  <target name="all" depends="clean,compile,javadoc,dist"
          description="Cleans and rebuilds everything including documentation."/>

  <target name="tests" depends="test-compile"
          description="Runs the unit tests. Use -Dtest=Foo to run FooTest.">
    <!-- allows passing -Dtest=NamePrefix to restrict to subset of tests -->
    <property name="test" value=""/>
    <taskdef name="unit" classpathref="test.classpath"
      classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
    <unit printsummary="off" haltonfailure="yes" fork="${junit.fork}">
      <classpath>
        <pathelement location="${classes.dir}"/>
        <pathelement location="${tclasses.dir}"/>
        <pathelement location="${basedir}"/> <!-- for rsrc/ -->
        <path refid="test.classpath"/>
      </classpath>
      <sysproperty key="com.samskivert.depot.debug" value="${debug}"/>
      <formatter type="brief" usefile="false"/>
      <batchtest>
        <fileset dir="${test.dir}">
          <include name="**/${test}*Test.java"/>
        </fileset>
      </batchtest>
    </unit>
  </target>

  <target name="dist" depends="tools-compile" description="Builds our jar file.">
    <jar destfile="${deploy.dir}/jar/${lib.name}.jar" basedir="${classes.dir}"/>
    <jar destfile="${deploy.dir}/source/${lib.name}.jar" basedir="${src.dir}"/>
  </target>

  <target name="publish" depends="dist,javadoc" description="Publishes jar to local repository.">
    <ivy:publish resolver="local" pubrevision="${revision}" forcedeliver="true">
      <artifacts pattern="${deploy.dir}/[type]/[artifact].[ext]"/>
    </ivy:publish>
  </target>

  <target name="publish-remote" depends="publish" description="Publishes a public release.">
    <exec executable="svn">
      <arg value="checkout"/>
      <arg value="-N"/>
      <arg value="https://${lib.name}.googlecode.com/svn/releases/com.samskivert/${lib.name}"/>
      <arg value="temp"/>
    </exec>
    <mkdir dir="temp/${revision}"/>
    <copy todir="temp/${revision}">
      <fileset dir="${user.home}/.ivy2/local/com.samskivert/${lib.name}/${revision}">
        <include name="ivys/ivy.xml"/>
        <include name="jars/${lib.name}.jar"/>
        <include name="sources/${lib.name}.jar"/>
        <include name="javadocs/${lib.name}.jar"/>
      </fileset>
    </copy>
    <exec executable="svn">
      <arg value="add"/>
      <arg value="temp/${revision}"/>
    </exec>
    <exec executable="svn">
      <arg value="commit"/>
      <arg value="-m"/>
      <arg value="Published release ${revision}."/>
      <arg value="temp"/>
    </exec>
    <delete dir="temp"/>
  </target>
</project>
